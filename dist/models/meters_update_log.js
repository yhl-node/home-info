"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function MetersUpdateLogModel(sequelize, DataTypes) {
    return sequelize.define('meters_update_log', {
        mid: {
            type: DataTypes.INTEGER,
            primaryKey: true,
            allowNull: false
        },
        balanceAmount: {
            type: DataTypes.DECIMAL,
            allowNull: false,
            defaultValue: '0.000'
        },
        hoardingLimit: {
            type: DataTypes.INTEGER,
            allowNull: false
        },
        lastMonth: {
            type: DataTypes.DECIMAL,
            allowNull: false
        },
        lastReadTime: {
            type: DataTypes.DATE,
            allowNull: true
        },
        meterValue: {
            type: DataTypes.DECIMAL,
            allowNull: true
        },
        diffMeter: {
            type: DataTypes.DECIMAL,
            allowNull: true
        },
        overdraftLimit: {
            type: DataTypes.INTEGER({ length: 4 }),
            allowNull: true
        },
        overdraftMoney: {
            type: DataTypes.INTEGER({ length: 4 }),
            allowNull: true
        },
        rKV: {
            type: DataTypes.INTEGER,
            allowNull: true
        },
        rMA: {
            type: DataTypes.INTEGER,
            allowNull: true
        },
        rPrice: {
            type: DataTypes.DECIMAL,
            allowNull: true
        },
        rTotalCharge: {
            type: DataTypes.DECIMAL,
            allowNull: true
        },
        switchState: {
            type: DataTypes.STRING(50),
            allowNull: true
        },
        thisMonth: {
            type: DataTypes.DECIMAL,
            allowNull: true
        }
    }, {
        tableName: 'meters_update_log'
    });
}
exports.default = MetersUpdateLogModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0ZXJzX3VwZGF0ZV9sb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL21ldGVyc191cGRhdGVfbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsU0FBUyxvQkFBb0IsQ0FBRSxTQUFvQixFQUFFLFNBQTBCO0lBQzdFLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtRQUMzQyxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsVUFBVSxFQUFFLElBQUk7WUFDaEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsWUFBWSxFQUFFLE9BQU87U0FDdEI7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLElBQUk7U0FDaEI7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLElBQUk7U0FDaEI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLElBQUk7U0FDaEI7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQztZQUNwQyxTQUFTLEVBQUUsSUFBSTtTQUNoQjtRQUNELGNBQWMsRUFBRTtZQUNkLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUMsTUFBTSxFQUFFLENBQUMsRUFBQyxDQUFDO1lBQ3BDLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO1FBQ0QsR0FBRyxFQUFFO1lBQ0gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO1FBQ0QsR0FBRyxFQUFFO1lBQ0gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO1FBQ0QsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO1FBQ0QsV0FBVyxFQUFFO1lBQ1gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQzFCLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO0tBQ0YsRUFBRTtRQUNELFNBQVMsRUFBRSxtQkFBbUI7S0FDL0IsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELGtCQUFlLG9CQUFvQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IGluZGVudDogMiAqL1xuaW1wb3J0IHsgU2VxdWVsaXplLCBEYXRhVHlwZXMgYXMgRGF0YVR5cGUgfSBmcm9tICdzZXF1ZWxpemUnO1xuXG5mdW5jdGlvbiBNZXRlcnNVcGRhdGVMb2dNb2RlbCAoc2VxdWVsaXplOiBTZXF1ZWxpemUsIERhdGFUeXBlczogdHlwZW9mIERhdGFUeXBlKSB7XG4gIHJldHVybiBzZXF1ZWxpemUuZGVmaW5lKCdtZXRlcnNfdXBkYXRlX2xvZycsIHtcbiAgICBtaWQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2VcbiAgICB9LFxuICAgIGJhbGFuY2VBbW91bnQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogJzAuMDAwJ1xuICAgIH0sXG4gICAgaG9hcmRpbmdMaW1pdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgICBhbGxvd051bGw6IGZhbHNlXG4gICAgfSxcbiAgICBsYXN0TW9udGg6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZVxuICAgIH0sXG4gICAgbGFzdFJlYWRUaW1lOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogdHJ1ZVxuICAgIH0sXG4gICAgbWV0ZXJWYWx1ZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwsXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIGRpZmZNZXRlcjoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwsXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIG92ZXJkcmFmdExpbWl0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUih7bGVuZ3RoOiA0fSksXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIG92ZXJkcmFmdE1vbmV5OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUih7bGVuZ3RoOiA0fSksXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIHJLVjoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIHJNQToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIsXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIHJQcmljZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwsXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIHJUb3RhbENoYXJnZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwsXG4gICAgICBhbGxvd051bGw6IHRydWVcbiAgICB9LFxuICAgIHN3aXRjaFN0YXRlOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDUwKSxcbiAgICAgIGFsbG93TnVsbDogdHJ1ZVxuICAgIH0sXG4gICAgdGhpc01vbnRoOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREVDSU1BTCxcbiAgICAgIGFsbG93TnVsbDogdHJ1ZVxuICAgIH1cbiAgfSwge1xuICAgIHRhYmxlTmFtZTogJ21ldGVyc191cGRhdGVfbG9nJ1xuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXRlcnNVcGRhdGVMb2dNb2RlbFxuIl19