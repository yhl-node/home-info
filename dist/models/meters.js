"use strict";
/* jshint indent: 2 */
Object.defineProperty(exports, "__esModule", { value: true });
;
function MetersModel(sequelize, DataTypes) {
    const model = sequelize.define('meters', {
        mid: { type: DataTypes.INTEGER, allowNull: false, primaryKey: true },
        balanceAmount: { type: DataTypes.DECIMAL, allowNull: false, defaultValue: '0.000' },
        hoardingLimit: { type: DataTypes.INTEGER, allowNull: false },
        lastMonth: { type: DataTypes.DECIMAL, allowNull: false },
        lastReadTime: { type: DataTypes.DATE, allowNull: true },
        meterValue: { type: DataTypes.DECIMAL, allowNull: true },
        overdraftLimit: { type: DataTypes.INTEGER({ length: 4 }), allowNull: true },
        overdraftMoney: { type: DataTypes.INTEGER({ length: 4 }), allowNull: true },
        rKV: { type: DataTypes.INTEGER, allowNull: true },
        rMA: { type: DataTypes.INTEGER, allowNull: true },
        rPrice: { type: DataTypes.DECIMAL, allowNull: true },
        rTotalCharge: { type: DataTypes.DECIMAL, allowNull: true },
        switchState: { type: DataTypes.STRING(50), allowNull: true },
        thisMonth: { type: DataTypes.DECIMAL, allowNull: true }
    }, {
        tableName: 'meters'
    });
    return model;
}
exports.default = MetersModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9tZXRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNCQUFzQjs7QUFVOEUsQ0FBQztBQUVyRyxTQUFTLFdBQVcsQ0FBRSxTQUFvQixFQUFFLFNBQTBCO0lBQ3BFLE1BQU0sS0FBSyxHQUFrRCxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtRQUN0RixHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUU7UUFDcEUsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFO1FBQ25GLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7UUFDNUQsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTtRQUN4RCxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO1FBQ3ZELFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7UUFDeEQsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO1FBQ3hFLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUMsTUFBTSxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRTtRQUN6RSxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO1FBQ2pELEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7UUFDakQsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRTtRQUNwRCxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO1FBQzFELFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7UUFDNUQsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRTtLQUN4RCxFQUFFO1FBQ0QsU0FBUyxFQUFFLFFBQVE7S0FDcEIsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDO0FBRUQsa0JBQWUsV0FBVyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IGluZGVudDogMiAqL1xuXG5pbXBvcnQgeyBTZXF1ZWxpemUsIE1vZGVsRGVmaW5lZCwgT3B0aW9uYWwsIERhdGFUeXBlcyBhcyBEYXRhVHlwZSB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmludGVyZmFjZSBBdHRyaWJ1dGVzIHtcbiAgbWlkOiBudW1iZXI7XG4gIGJhbGFuY2VBbW91bnQ6IG51bWJlcjtcbiAgbWV0ZXJWYWx1ZTogbnVtYmVyXG59XG5cbmludGVyZmFjZSBDcmVhdGlvbkF0dHJpYnV0ZXMgZXh0ZW5kcyBPcHRpb25hbDxBdHRyaWJ1dGVzLCAnbWlkJyB8ICdiYWxhbmNlQW1vdW50JyB8ICdtZXRlclZhbHVlJz4ge307XG5cbmZ1bmN0aW9uIE1ldGVyc01vZGVsIChzZXF1ZWxpemU6IFNlcXVlbGl6ZSwgRGF0YVR5cGVzOiB0eXBlb2YgRGF0YVR5cGUpIHtcbiAgY29uc3QgbW9kZWw6IE1vZGVsRGVmaW5lZDxBdHRyaWJ1dGVzLCBDcmVhdGlvbkF0dHJpYnV0ZXM+ID0gIHNlcXVlbGl6ZS5kZWZpbmUoJ21ldGVycycsIHtcbiAgICBtaWQ6IHsgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIsIGFsbG93TnVsbDogZmFsc2UsIHByaW1hcnlLZXk6IHRydWUgfSxcbiAgICBiYWxhbmNlQW1vdW50OiB7IHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMLCBhbGxvd051bGw6IGZhbHNlLCBkZWZhdWx0VmFsdWU6ICcwLjAwMCcgfSxcbiAgICBob2FyZGluZ0xpbWl0OiB7IHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSLCBhbGxvd051bGw6IGZhbHNlIH0sXG4gICAgbGFzdE1vbnRoOiB7IHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMLCBhbGxvd051bGw6IGZhbHNlIH0sXG4gICAgbGFzdFJlYWRUaW1lOiB7IHR5cGU6IERhdGFUeXBlcy5EQVRFLCBhbGxvd051bGw6IHRydWUgfSxcbiAgICBtZXRlclZhbHVlOiB7IHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMLCBhbGxvd051bGw6IHRydWUgfSxcbiAgICBvdmVyZHJhZnRMaW1pdDogeyB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUih7bGVuZ3RoOjR9KSwgYWxsb3dOdWxsOiB0cnVlIH0sXG4gICAgb3ZlcmRyYWZ0TW9uZXk6IHsgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIoe2xlbmd0aDogNH0pLCBhbGxvd051bGw6IHRydWUgfSxcbiAgICByS1Y6IHsgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIsIGFsbG93TnVsbDogdHJ1ZSB9LFxuICAgIHJNQTogeyB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUiwgYWxsb3dOdWxsOiB0cnVlIH0sXG4gICAgclByaWNlOiB7IHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMLCBhbGxvd051bGw6IHRydWUgfSxcbiAgICByVG90YWxDaGFyZ2U6IHsgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwsIGFsbG93TnVsbDogdHJ1ZSB9LFxuICAgIHN3aXRjaFN0YXRlOiB7IHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoNTApLCBhbGxvd051bGw6IHRydWUgfSxcbiAgICB0aGlzTW9udGg6IHsgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwsIGFsbG93TnVsbDogdHJ1ZSB9XG4gIH0sIHtcbiAgICB0YWJsZU5hbWU6ICdtZXRlcnMnXG4gIH0pXG4gIHJldHVybiBtb2RlbFxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXRlcnNNb2RlbFxuIl19